<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="MemberDAO">

	<insert id="insertMember">
		insert into member values(#{id},
		#{password}, #{name}, #{email}, #{birthDay,jdbcType=VARCHAR},
		#{gender,jdbcType=VARCHAR},
		#{phone,jdbcType=VARCHAR}, #{zipcode,jdbcType=VARCHAR}, #{address1,jdbcType=VARCHAR},
		#{address2,jdbcType=VARCHAR}, #{type,jdbcType=NUMERIC}, 0 ,
		#{imagepath,jdbcType=VARCHAR})
	</insert>
	<insert id="insertNaverJoin">
		insert into member values(#{id},
		#{password,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR},
		#{email,jdbcType=VARCHAR}, #{birthDay,jdbcType=VARCHAR},
		#{gender,jdbcType=VARCHAR},
		#{phone,jdbcType=VARCHAR}, #{zipcode,jdbcType=VARCHAR}, #{address1,jdbcType=VARCHAR},
		#{address2,jdbcType=VARCHAR}, #{type,jdbcType=NUMERIC}, 0 ,
		#{imagepath,jdbcType=VARCHAR})
	</insert>
	<select id="selectAllMembers"
		resultType="kh.spring.dto.MemberDTO">
		select * from member;
	</select>

	<select id="isLoginOk" resultType="int">
		select count(*) from member
		where id=#{id} and password=#{password}
	</select>

	<select id="idDuplCheck" resultType="int">
		select count(*) from member
		where id=#{value}
	</select>
	<select id="doublemail" resultType="int">
		select count(*) from member
		where email=#{value} and type='1'
	</select>

	<select id="idFind" resultType="String">
		select id from member where
		name=#{name} and birthDay=#{birthday}
	</select>

	<select id="selectOneMember"
		resultType="kh.spring.dto.MemberDTO">
		select * from member where id=#{value}
	</select>

	<select id="selectByLikeId" resultType="kh.spring.dto.MemberDTO">
		select * from
		(select row_number() over(order by id asc) as rown, member.id
		from member where (id like #{array[0]}))
		where (rown between #{array[1]} and #{array[2]})
	</select>
	<select id="selectCountByLikeId" resultType="java.lang.Integer">
		select count(*) from
		member where (id like #{value})
	</select>

	<update id="modifyMember">
		update member set password=#{password}, name=#{name},
		email=#{email}, phone=#{phone},
		zipcode=#{zipcode}, addredd1=#{address1}, addredd2=#{addredd2} where id=#{id}
	</update>

	<delete id="deleteMember">
		delete from member where id=#{value}
	</delete>
	<update id="updatePw">
		update member set password = #{pw} where id = #{id}
	</update>

	<!-- 퀴즈에서 씀! -->
	<select id="memberPoint" resultType="kh.spring.dto.MemberDTO">
		select rank, id, point
		from(select rank() over(order by point desc)as rank, member.* from
		member) where rank between 1 and 10
	</select>
	<select id="selectOneMemberDTO_useMyPageAdvice"
		resultType="kh.spring.dto.MemberDTO">
		select id , password , name , email , nvl( birthDay ,
		'(미설정)') as birthDay ,nvl( GENDER , '(미설정)') as gender
		,nvl( PHONE ,
		'(미설정)') as phone ,nvl( ZIPCODE , '(미설정)') as zipcode ,nvl( ADDRESS1 ,
		'(미설정)') as address1
		,nvl( ADDRESS2 , '(미입력)') as address2, type , point , imagepath from member
		where id=#{id}
	</select>
	<update id="updateMemberInfoByMyPage">
		update member set name=#{name}
		<if test="birthDay!=null">
			,birthday = #{birthDay}
		</if>
		<if test="gender!=null">
			,gender = #{gender}
		</if>
		<if test="phone!=null">
			,phone = #{phone}
		</if>
		<if test="zipcode!=null">
			,zipcode = #{zipcode}
		</if>
		<if test="address1!=null">
			,address1 = #{address1}
		</if>
		<if test="address2!=null">
			,address2 = #{address2}
		</if>
		where id=#{id}
	</update>
	<update id="updateImagePath">
		update member set imagepath = #{imagepath} where
		id=#{id}
	</update>

	<!-- used in admin-quiz -->
	<select id="selectRankFiveByPoint"
		resultType="kh.spring.dto.MemberDTO">
		select *
		from (select rank() over(order by point desc) as rank
		, row_number() over(order by point desc) as rown
		, member.id, member.point
		from member)
		where (rank between 1 and 5) and (rown between #{array[0]} and #{array[1]})
	</select>
	<select id="selectCountRankFiveByPoint"
		resultType="java.lang.Integer">
		select count(*) from
		(select rank() over(order by point desc) as rank
		from member)
		where (rank between 1 and 5)
	</select>
	<select id="selectCount" resultType="java.lang.Integer">
		select count(*) from member
	</select>
	<update id="updatePointRandom">
		update member set point = #{point}
		where id = (select
		id
		from (select row_number() over(order by id asc) as rown , member.* from
		member)
		where rown = #{index})
	</update>
	<select id="selectAllType4" resultType="String">
		select id from member where type=4
	</select>
</mapper>